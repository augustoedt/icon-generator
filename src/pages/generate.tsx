import { type NextPage } from "next";
import { signIn, signOut, useSession } from "next-auth/react";
import Head from "next/head";
import Image from "next/image";
import { useState, type ChangeEvent, type FormEvent } from "react";
import { Button } from "~/components/Button";
import { FormGroup } from "~/components/FormGroup";
import { Input } from "~/components/Input";
import { LoadingButton } from "~/components/LoadingButton";
import { api } from "~/utils/api";

const GeneratePage: NextPage = () => {
  const session = useSession();

  const isLoggedIn = !!session.data

  const [form, setForm] = useState({
    prompt: "",
  });

  const icons = api.icons.generateIcon.useQuery();

  const [imageUrl, setImageUrl] = useState("");

  const [loading, setLoading] = useState(false);

  const generationIcon = api.generate.generateIcon.useMutation({
    onSuccess: (data) => {

      if (!data.imageUrl) return;

      setImageUrl(data.imageUrl)

    },
  });

  function handleSubmit(e: FormEvent) {
    e.preventDefault();
    // submit form data to the backend
    setLoading(true);

    generationIcon.mutate({
      prompt: form.prompt,
    })

    setLoading(false);
  }

  function updateForm(key: string) {
    return function (e: ChangeEvent<HTMLInputElement>) {
      setForm((prev) => ({
        ...prev,
        [key]: e.target.value
      }));
    }
  }



  return (<>
    <Head>
      <title>Create</title>
      <meta name="description" content="Generated by create-t3-app" />
      <link rel="icon" href="/favicon.ico" />
    </Head>
    <main className="flex flex-col min-h-screen justify-center items-center">
      {!isLoggedIn && <Button onClick={() => { signIn().catch(console.error) }} >Login</Button>}
      {isLoggedIn && <Button onClick={() => { signOut().catch(console.error) }} >Logout</Button>}
      <form onSubmit={handleSubmit} className="flex flex-col gap-4">
        <FormGroup>
          <label className="text-gray-100 font-bold text-lg">Prompt</label>
          <Input value={form.prompt} onChange={updateForm("prompt")} type="text" />
        </FormGroup>
        <LoadingButton loading={loading} />

      </form>

      {imageUrl.length > 0
        && <Image
          width="600"
          height="600"
          src={imageUrl}
          alt="generated image icon" />}

      {/* generate a list of image with max 5 columns*/}
      <ul className="grid grid-cols-5 gap-4">
        {icons.data?.icons.map((icon) => (<li key={icon.id}>
          <Image
            className="rounded-lg shadow-lg shadow-gray-400 border-2 border-white"
            width="250"
            height="250"
            src={`https://icon-ai-generator.s3.sa-east-1.amazonaws.com/${icon.id}`}
            alt={`${icon.prompt ?? " "}: generated image icon`} />
        </li>
        ))}
      </ul>
    </main>
  </>);
};

export default GeneratePage;
